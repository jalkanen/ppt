#####################################################################
#
#       This is a makefile for PPT. (C) Janne Jalkanen 1995
#
#       This makefile is meant to be used with Matthew Dillon's
#       DMAKE utility.
#
#       $Id: dmakefile,v 1.5 1996/10/10 19:14:36 jj Exp $
#
#####################################################################
#
#   Generic paths and stuff.
#

#   The directory in which PPT source code is backed up
#   on 'dmake backup'. The slash or colon in the end MUST exist.
BACKUPDIR = data:backup/

#   This is the distribution directory, where the distribution
#   will be done on 'dmake dist'.
DISTDIR   = ram:ppt

#   The main directory
MAINDIR   = work:source/c/ppt

#   Externals source directory
EXTSRCDIR = $(MAINDIR)/externals/src

#   Object directories. OD is for the debugging version and
#   ROD is for the release version with no debug code.
OD        = dtmp:pptsc/
ROD       = dtmp:pptsc_rel/

# GST files for SAS/C
GST   = defs.gst
RGST  = rdefs.gst

# Main executables
MAIN   = ppt
MFILE  = T:defs.m
RMAIN  = ppt_rel
RMFILE = T:rdefs.m

#   Example files. These are currently scanned for autodoc
#   entries
EXAMPLES  = $(EXTSRCDIR)/sample_effect/sample_effect.c \
            $(EXTSRCDIR)/sample_loader/sample_loader.c


#####################################################################
#
#   Compilers and their options used.
#   This is for the debug-version
#

#CC     = dcc
#COPTS  = -proto -Ht:defs.m=defs.h -mi -DDEBUG_MODE -d1 -ms
CC     = SC
COPTS  = ignore=104 OBJECTNAME=$(OD) NOICONS IDIR=dinclude:pd \
         NOCONSTLIB NOSTKCHK STREQV

# a68k makes erroneous code!
#AS     = das
#ASOPTS =
AS     = SC
ASOPTS =

# LINK   = dcc
# LINKOPTS = -lbgui -lm
LINK   = SC LINK
LINKOPTS = MATH=s

#
# If using Fortify, then link together with the
# following files.
#
FORTOBJS = /fortify/fortify.o
FORTLITEOBJS = /fortify/fortifylite.o
#FORTCOPTS = -DFORTIFY
#FORTLOPTS = -lpptsupp -L$(MAINDIR)/linklib
FORTCOPTS  = Define=FORTIFY
FORTLOPTS  = LIB=$(MAINDIR)/linklib/pptsupp.lib

#
#  Debugger version
#
#DCOPTS = -d1
#LDFLAGS= $(LINKOPTS) $(FORTLOPTS) -s
DCOPTS = DEF=DEBUG_MODE DEBUG=SF ERRORREXX GST=$(GST)
LDFLAGS = $(LINKOPTS) $(FORTLOPTS) ADDSYM

#
#  Release version
#
#RCOPTS = -ms -mi -proto -H$(RMFILE)=defs.h
RCOPTS  = $(COPTS) cpu=68020 OPT OPTSCHED DEBUG=LINE STRCON
RLDFLAGS= $(LINKOPTS) $(FORTLOPTS)
STRIP   = SLINK $(RMAIN) TO $(RMAIN).strip STRIPDEBUG NOICONS

#####################################################################
#
#  End of configurational stuff.  This section defines the
#  differences in compilers.
#
#  Syntax options
#

# DCC
#OBJNAME = -o
#COMPILE = -c
#LINKTO  = -o

# SAS
OBJNAME = OBJNAME
COMPILE =
LINKTO  = TO

#####################################################################
#
#   C sources and assembler source codes.
#

SRCS = initexit.c gui.c infowin.c debug.c load.c edit.c frame.c main.c \
       filter.c others.c message.c memory.c errors.c support.c vm.c display.c \
       render.c rendermod.c dither.c dispdevs.c colormap.c palette.c \
       external.c prefs.c save.c palette_edit.c rexx.c areaclass.c \
       askreq.c ppt_cat.c

ASSYS = render2.a

# Any change in these files forces a recompile as all sources
# depend on these.

# HDRS = ppt_real.h defs.h ppt_cat.h
HDRS = ppt_real.h defs.h

# A change in these headers forces a recompile of the pre-generated
# header files.

MHDRS = defs.h ppt_real.h protos.h machine-protos.h \
        render.h rexx.h ppt_cat.h gui.h askreq.h

#   Object files.

COBJS = $(SRCS:"*.c":"$(OD)*.o")
AOBJS = $(ASSYS:"*.a":"$(OD)*.o")

# Those who depend on version & gfx information
VOBJS = $(OD)main.o $(OD)gui.o $(OD)prefs.o $(OD)palette_edit.o $(OD)askreq.o

# Render objects, depend on render.h
RENDOBJS = $(OD)colormap.o $(OD)palette.o $(OD)rendermod.o $(OD)dispdevs.o \
           $(OD)dither.o $(OD)palette_edit.o $(OD)main.o


#
# Debug version
#

CFLAGS = $(COPTS) $(DCOPTS) $(FORTCOPTS)
#CFLAGS = $(COPTS) $(DCOPTS)
OBJS   = $(COBJS) $(AOBJS) $(FORTOBJS)

#
#   Release version
#

RCFLAGS = $(COPTS) $(RCOPTS) $(FORTCOPTS)
RCOBJS  = $(SRCS:"*.c":"$(ROD)*.o")
ROBJS   = $(RCOBJS) $(AOBJS) $(FORTLITEOBJS)
RVOBJS  = $(ROD)main.o $(ROD)gui.o $(ROD)prefs.o

#####################################################################
#
#   End of configuration, now begins the compiler stuff
#

all : $(GST) $(MFILE) $(MAIN) $(OD) externals
        @List $(MAIN) NOHEAD
        @beep
        @Avail FLUSH >NIL:

release : $(RMFILE) $(RMAIN) $(ROD) externals
        @List $(RMAIN) NOHEAD
        @beep

$(OD) : $(OD)
        makedir %(left)

$(ROD) : $(ROD)
        makedir %(left)

# Link phase

$(MAIN) : $(OBJS) $(VOBJS)
        $(LINK) $(OBJS) $(LINKTO) %(left) $(LDFLAGS)

$(RMAIN) : $(ROBJS)
        $(LINK) $(ROBJS) $(LINKTO) %(left) $(RLDFLAGS)
        $(STRIP)
        Copy $(RMAIN).strip $(RMAIN)
        Delete $(RMAIN).strip

#
# Compile phase
#

$(COBJS) : $(SRCS)
        $(CC) $(CFLAGS) %(right) $(OBJNAME) %(left) $(COMPILE)


$(AOBJS) : $(ASSYS)
        $(AS) $(ASOPTS) %(right) $(OBJNAME) %(left)

$(VOBJS) :: version.h gui.h

$(RENDOBJS) :: render.h

$(OD)rexx.o :: rexx.h

$(OD)external.o :: misc.h

$(RCOBJS) : $(SRCS)
        $(CC) $(RCFLAGS) %(right) $(OBJNAME) %(left) $(COMPILE)

$(COBJS) :: $(HDRS)

$(RCOBJS) :: $(HDRS)

$(RVOBJS) :: version.h gui.h

$(ROD)rexx.o :: rexx.h

$(ROD)external.o :: misc.h


# Externals

externals : ppt.h
        cd $(EXTSRCDIR)
        @dmake install

$(MFILE) : $(MHDRS)
        Delete $(MFILE) >NIL:

$(RMFILE) : $(MHDRS)
        Delete $(RMFILE) > NIL:

$(GST) : $(MHDRS)
        Delete $(GST) >NIL:
        SC MAKEGST=$(GST) $(COPTS) $(DCOPTS) gst.c IGNORE=105

$(RGST) : $(MHDRS)
        Delete $(RGST) >NIL:
        SC MAKEGST=$(RGST) $(COPTS) gst.c IGNORE=105

gst : $(GST) $(RGST)

ext :
        cd $(EXTSRCDIR)
        @dmake install

# Make prototypes file

proto : $(SRCS)
        makeproto -o machine-protos.h $(SRCS)

# Makes a backup from everything except for object files.

backup :
        lha -r u $(BACKUPDIR)ppt.lha ~(#?.o)
        @beep

# RCS update

rcs :
        ci -l -q *.c

# This makes a distribution

dist : all release $(DISTDIR) docs
        dupdate $(MAINDIR) $(DISTDIR) FORCE
        Rename $(DISTDIR)/ppt_rel $(DISTDIR)/ppt
        MakeDir $(DISTDIR)/libs
        Copy LIBS:bgui.library $(DISTDIR)/libs
        Copy SYS:Classes/Gadgets/palette_bgui.gadget $(DISTDIR)/libs
        lha -r u RAM:PPT_dist.lha $(DISTDIR)/#?
        @beep

$(DISTDIR) : $(DISTDIR)
        MakeDir $(DISTDIR)

# And this can be used to construct the link libraries

linklib:
        @cd linklib
        @dmake
        @beep

# Use this to make a new pragma library

pragmas:
        fd2pragma SAS pragmas/pptsupp_pragmas.h fd/pptsupp_lib.fd
        fd2pragma SAS pragmas/module_pragmas.h fd/module_lib.fd
        fd2pragma SAS pragmas/effect_pragmas.h fd/effect_lib.fd

# This will build the ppt catalog strings

locale: catcode catalogs

catcode:
        FlexCat Catalogs/ppt.cd ppt_cat.c=Catalogs/ppt_c.sd
        FlexCat Catalogs/ppt.cd ppt_cat.h=Catalogs/ppt_h.sd

catalogs:
        cd Catalogs
        FlexCat ppt.cd suomi/ppt.ct CATALOG suomi/ppt.catalog

# This will reconstruct the developer docs.

docs:
        adoc -Ft:autodoc.tmp -C -I -c $(SRCS) linklib/debug/debug.c \
             linklib/support/pgeta4.a linklib/support/execa4.a > docs/support.doc
        adoc -Ft:autodoc.tmp -C -I -c $(EXAMPLES) > docs/externals.doc
        Delete dme.refs
        autorefs dme.refs docs/support.doc docs/externals.doc

#
# Support stuff
#

modinfo : ModuleInfo/moduleinfo

ModuleInfo/moduleinfo : ppt_real.h
        cd ModuleInfo
        @dmake install
        @cd /

# This can be used to force recompile

force : touch all

touch :
        Touch defs.h

